<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>乐居项目总结</title>
      <link href="/2019/11/07/le-ju-xiang-mu-zong-jie/"/>
      <url>/2019/11/07/le-ju-xiang-mu-zong-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="swiper-滑动时报错"><a href="#swiper-滑动时报错" class="headerlink" title="swiper 滑动时报错"></a>swiper 滑动时报错</h2><p>在chrome浏览器中,swiper滑动测试时会报一个这种错误<img src="/mdimages/%E4%B9%90%E5%B1%85%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/1.jpg" alt><br>在网上搜索了下,大概的原因就是chrome为了让浏览器能更快,给这个preventDefault返回了naive，不再是清除浏览器默认行为了.</p><ul><li>搜来搜去,网上的解决方法大都是在css全局添加一个<code>touch-action:none</code>.这种方式确实可以解决报错问题,但出现了另一个问题,在移动端情况下,无法上下滑动.(实测,滚轮滑动可以,但触摸滑动不生效.)</li><li>后来在github上swiper的交流区上,终于找到了合适的方法:<br>在头部标签上添加<code>ontouchstart</code>属性<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">ontouchstart</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre></li></ul><br><br><h2 id="路由传递的数据获取-链接可不显示传值的方法"><a href="#路由传递的数据获取-链接可不显示传值的方法" class="headerlink" title="路由传递的数据获取,链接可不显示传值的方法"></a>路由传递的数据获取,链接可不显示传值的方法</h2><p>之前一直都使用的是<code>/xx/:id</code>的路由方式传值,这种传值方式虽然能在路径上显示值,但是总会有不想显示传值的情况.在vue.js官网里查了下,果真有介绍了这种写法,以下是两种写法的展示:</p><ol><li><p>路径中带传值的方式:</p><ul><li>Router.js:<pre class=" language-js"><code class="language-js"> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 动态路由/:传递的值</span>         path<span class="token punctuation">:</span> <span class="token string">'/info/:id'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//获取 this.$route.params.id</span>         component<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/views/information/information'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         meta<span class="token punctuation">:</span> <span class="token punctuation">{</span>             isshow<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span></code></pre></li><li>任意传值页面:<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">tag</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div<span class="token punctuation">"</span></span> <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>`/info/${ id }`<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span></code></pre></li><li>接收页面:<pre class=" language-js"><code class="language-js"> <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">;</span>   <span class="token punctuation">}</span></code></pre></li></ul></li><li><p>路劲中不带传值的方式：(也是通过params,但不用在路由里写:id)</p><ul><li>任意传值页面：(name就是路劲对应的名称)<pre class=" language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">tag</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div<span class="token punctuation">"</span></span>  <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{name:<span class="token punctuation">'</span>myorder<span class="token punctuation">'</span>,params:{status:<span class="token punctuation">'</span>fin<span class="token punctuation">'</span>}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span></code></pre></li><li>接收页面:<pre class=" language-js"><code class="language-js">   <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>nowstatus <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>status<span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><br><br></li></ul></li></ol><h2 id="在操作DOM时获取VUE实例"><a href="#在操作DOM时获取VUE实例" class="headerlink" title="在操作DOM时获取VUE实例"></a>在操作DOM时获取VUE实例</h2><p>虽然Vue是不推荐在vue中操作DOM的,但是有的时候第一思路就是操作DOM,这种时候就会遇到一些问题,在操作DOM时经常会用到this,这样就会与vue实例的this冲突。<br>那有什么解决方法呢?我一般是在方法之前<code>var vm = this</code>,声明一个变量代替vue实例的this</p><br><br><h2 id="消除a标签点击时出现的蓝色块"><a href="#消除a标签点击时出现的蓝色块" class="headerlink" title="消除a标签点击时出现的蓝色块"></a>消除a标签点击时出现的蓝色块</h2><pre class=" language-css"><code class="language-css">// 消除点击时蓝色<span class="token property">-webkit-tap-highlight-color</span><span class="token punctuation">:</span> transparent<span class="token punctuation">;</span></code></pre><br><br><h2 id="css代码穿透和加权"><a href="#css代码穿透和加权" class="headerlink" title="css代码穿透和加权"></a>css代码穿透和加权</h2><p>由于vue中css通常用scoped让css仅对当前页面生效,这时在使用swiper等插件的时候,想要修改样式,需要使用代码穿透</p><ul><li>代码穿透<code>::v-deep</code>:<pre class=" language-css"><code class="language-css"><span class="token selector">// 穿透<span class="token pseudo-element">::v-deep</span> <span class="token class">.swiper-pagination</span> </span><span class="token punctuation">{</span>  <span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li>加权<code>!important</code>:<pre class=" language-css"><code class="language-css"><span class="token selector">div</span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#f00</span>!important<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul><br><br><h2 id="xa0代表空格"><a href="#xa0代表空格" class="headerlink" title="\xa0代表空格"></a><code>\xa0</code>代表空格</h2><p>在自己做数据的时候,遇到数据中夹杂着空格的情况,一开始使用<code>&amp;nbsp;</code>来写的,但发现在页面上被当成了字符串直接显示,没有解析成空格.在网上搜索了资料后,用<code>\xa0</code>来表示空格,在页面上成功显示.</p><br><br><h2 id="图片资源宽高差1-3px-导致flex排版不对齐"><a href="#图片资源宽高差1-3px-导致flex排版不对齐" class="headerlink" title="图片资源宽高差1-3px,导致flex排版不对齐"></a>图片资源宽高差1-3px,导致flex排版不对齐</h2><p>解决方法: 给图片添加一个固定宽高的外部盒子,这样就可以无论图片大小,都是排版外部盒子的.</p><br><br><h2 id="JSON转字符串转对象"><a href="#JSON转字符串转对象" class="headerlink" title="JSON转字符串转对象"></a>JSON转字符串转对象</h2><ul><li>转字符串:<code>JSON.stringify()</code></li><li>转JS对象: <code>JSON.parse()</code></li></ul><br><br><h2 id="vue在APP里添加页面切换动画"><a href="#vue在APP里添加页面切换动画" class="headerlink" title="vue在APP里添加页面切换动画"></a>vue在APP里添加页面切换动画</h2><pre class=" language-html"><code class="language-html"> <span class="token comment" spellcheck="true">&lt;!-- 切换路由的动画效果 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span> <span class="token attr-name">:name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transitionName<span class="token punctuation">"</span></span> <span class="token attr-name">mode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>out-in<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 监听路由路径的变化</span>watch<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token function">$route</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 设定需要判断动画的路径</span>    <span class="token comment" spellcheck="true">//一级路由</span>    <span class="token keyword">const</span> tabPath <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"/home"</span><span class="token punctuation">,</span> <span class="token string">"/search"</span><span class="token punctuation">,</span> <span class="token string">"/my"</span><span class="token punctuation">,</span> <span class="token string">"/login"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>      tabPath<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> item <span class="token operator">==</span> to<span class="token punctuation">.</span>path<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>      tabPath<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> item <span class="token operator">==</span> <span class="token keyword">from</span><span class="token punctuation">.</span>path<span class="token punctuation">)</span>    <span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>transitionName <span class="token operator">=</span> <span class="token string">"fade"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// console.log('to.path',to.path)</span>      <span class="token comment" spellcheck="true">// 判断二级</span>      <span class="token keyword">const</span> toDepth <span class="token operator">=</span> to<span class="token punctuation">.</span>path<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>      <span class="token keyword">const</span> fromDepth <span class="token operator">=</span> <span class="token keyword">from</span><span class="token punctuation">.</span>path<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>transitionName <span class="token operator">=</span>        toDepth <span class="token operator">&lt;</span> fromDepth <span class="token operator">?</span> <span class="token string">"slide-right"</span> <span class="token punctuation">:</span> <span class="token string">"slide-left"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-css"><code class="language-css"><span class="token selector">// 动画区域<span class="token class">.slide-left-enter-active</span> </span><span class="token punctuation">{</span>  <span class="token property">animation</span><span class="token punctuation">:</span> slideLeft <span class="token number">0.8</span>s<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.slide-right-enter-active</span> </span><span class="token punctuation">{</span>  <span class="token property">animation</span><span class="token punctuation">:</span> slideRight <span class="token number">0.8</span>s<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.fade-enter-active</span> </span><span class="token punctuation">{</span>  <span class="token property">transition</span><span class="token punctuation">:</span> all ease <span class="token number">0.4</span>s<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.fade-enter</span> </span><span class="token punctuation">{</span>  <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@keyframes</span> slideLeft</span> <span class="token punctuation">{</span>  <span class="token selector">0% </span><span class="token punctuation">{</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span><span class="token number">100%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">100% </span><span class="token punctuation">{</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@keyframes</span> slideRight</span> <span class="token punctuation">{</span>  <span class="token selector">0% </span><span class="token punctuation">{</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>-<span class="token number">100%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">100% </span><span class="token punctuation">{</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 2019 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 问题总结 </tag>
            
            <tag> 巩固 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-cil项目攻略</title>
      <link href="/2019/11/03/vue-cli-xiang-mu-gong-lue/"/>
      <url>/2019/11/03/vue-cli-xiang-mu-gong-lue/</url>
      
        <content type="html"><![CDATA[<h1 id="vue-cli项目攻略"><a href="#vue-cli项目攻略" class="headerlink" title="vue-cli项目攻略"></a>vue-cli项目攻略</h1><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><ul><li>在Powershell或者VScode根文件夹下右键—在终端中打开, 输入<code>vue create XXX(文件名)</code></li><li>选择需要安装的插件 <ul><li><code>vue-router</code> 项目路由 ,可后续安装</li><li><code>vuex</code> 项目存储库 , 可后续安装</li><li><code>node-sass</code> scss</li><li><code>babel</code> 基础</li></ul></li></ul><h2 id="引入插件"><a href="#引入插件" class="headerlink" title="引入插件"></a>引入插件</h2><ul><li>在Powershell或者VScode根文件夹下右键—在终端中打开, 输入<code>cnpm/npm  install  XXX(插件) --save</code>  <strong>:</strong> <strong>:</strong>  <strong>:</strong> install(缩写)i  <strong>:</strong> <strong>:</strong> <strong>:</strong> save(缩写)s <strong>:</strong> <strong>:</strong> <strong>:</strong> cnpm 淘宝的镜像,国内网络,比npm安装速度要快点</li><li>检查方式, 在项目里的<code>package.json</code>文件夹里看有没有引入的插件</li></ul><h4 id="插件通用的CSS样式修改问题"><a href="#插件通用的CSS样式修改问题" class="headerlink" title="插件通用的CSS样式修改问题"></a>插件通用的CSS样式修改问题</h4><ul><li>把style里面的<code>scoped</code>属性去除即可.</li><li>理由 : scoped是让其他页面无法使用当前页面的CSS样式,大部分插件库都引用的自己的CSS. </li></ul><h4 id="常用的插件库"><a href="#常用的插件库" class="headerlink" title="常用的插件库"></a>常用的插件库</h4><ul><li><p><a href="https://element.eleme.cn/#/zh-CN/component/installation" target="_blank" rel="noopener">elementUI(webUI)</a>   </p><ul><li><p>安装 <strong>:</strong> <code>npm i element-ui -S</code></p></li><li><p>完整引入 <strong>:</strong> 在main.js中引入</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//以下内容是需要添加的</span><span class="token keyword">import</span> ElementUI <span class="token keyword">from</span> <span class="token string">'element-ui'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'element-ui/lib/theme-chalk/index.css'</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>ElementUI<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//还有这里也是需要添加的 </span>render<span class="token punctuation">:</span> h <span class="token operator">=</span><span class="token operator">></span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><br><br></li></ul></li><li><p><a href="https://youzan.github.io/vant/?source=vuejsorg#/zh-CN/quickstart" target="_blank" rel="noopener">vant(移动端UI)</a>  </p><ul><li><p>安装 <strong>:</strong> <code>npm i vant -S</code></p></li><li><p>完整引入 <strong>:</strong> 在main.js中引入</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//以下内容是需要添加的</span><span class="token keyword">import</span> Vant <span class="token keyword">from</span> <span class="token string">'vant'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'vant/lib/index.css'</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vant<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p><a href="https://www.cnblogs.com/lml2017/p/9953429.html" title="vant的px尺寸转rem" target="_blank" rel="noopener">vant的px尺寸转rem</a></p><ol><li>安装flexible和 postcss-px2rem <strong>(这两个CNPM找不到,只能用npm)</strong><br><code>npm install lib-flexible --save</code> 和<code>npm install postcss-px2rem --save</code></li><li>在项目入口文件main.js 中引入lib-flexible<br><code>import &#39;lib-flexible&#39;</code></li><li>在vue-cli3 项目中新建vue.config.js文件,有的话就直接用<pre class=" language-js"><code class="language-js"> module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>     css<span class="token punctuation">:</span> <span class="token punctuation">{</span>         loaderOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>         css<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>         postcss<span class="token punctuation">:</span> <span class="token punctuation">{</span>             plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>             <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'postcss-px2rem'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                 remUnit<span class="token punctuation">:</span> <span class="token number">37.5</span>             <span class="token punctuation">}</span><span class="token punctuation">)</span>             <span class="token punctuation">]</span>         <span class="token punctuation">}</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">}</span></code></pre></li><li>npm run serve 重启,<strong>必做</strong></li></ol><br><br></li></ul></li><li><p><a href="https://github.com/nuysoft/Mock/wiki/Getting-Started">mockjs(随机生成)</a> <strong>:</strong> <code>npm install mockjs</code><br>  在需要数据的JS页面引入</p><pre class=" language-js"><code class="language-js">  <span class="token comment" spellcheck="true">//这里只是用了mock的随机数据功能,其他功能参考这种引入</span>  <span class="token keyword">import</span> mocks <span class="token keyword">from</span> <span class="token string">"mockjs"</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> mock <span class="token operator">=</span> mocks<span class="token punctuation">.</span>Random<span class="token punctuation">;</span></code></pre>  <br>  <br></li></ul><h2 id="router路由"><a href="#router路由" class="headerlink" title="router路由"></a>router路由</h2><h4 id="手动安装router的引入"><a href="#手动安装router的引入" class="headerlink" title="手动安装router的引入"></a>手动安装router的引入</h4><ol><li><p>安装router  <code>cnpm install vue-router --save</code></p></li><li><p>在src目录下新建router =&gt; router.js</p></li><li><p>在router.js里面添加import和export</p><pre class=" language-js"><code class="language-js"> <span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span> <span class="token keyword">import</span> Router <span class="token keyword">from</span> <span class="token string">"vue-router"</span> Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Router<span class="token punctuation">)</span> <span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     mode<span class="token punctuation">:</span><span class="token string">"history"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 需要后端配置一下</span>     scrollBehavior <span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> savedPosition<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>             <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>             <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>             <span class="token punctuation">}</span><span class="token punctuation">)</span>         <span class="token punctuation">}</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span><span class="token punctuation">,</span>     routes<span class="token punctuation">:</span><span class="token punctuation">[</span>         <span class="token punctuation">{</span>             path<span class="token punctuation">:</span><span class="token string">"/"</span><span class="token punctuation">,</span>             redirect <span class="token punctuation">:</span> <span class="token string">"/login"</span>         <span class="token punctuation">}</span><span class="token punctuation">,</span>         <span class="token punctuation">{</span>             path<span class="token punctuation">:</span><span class="token string">"/login"</span><span class="token punctuation">,</span>             component<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span> <span class="token string">'@/views/login/index.vue'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>             meta<span class="token punctuation">:</span><span class="token punctuation">{</span>                 isFootShow<span class="token punctuation">:</span><span class="token boolean">false</span>             <span class="token punctuation">}</span>         <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">export</span> <span class="token keyword">default</span> router</code></pre></li><li><p>在全局main.js中引入,地址根据实际情况修改</p><pre class=" language-js"><code class="language-js"> <span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">"./router/router.js"</span></code></pre><br><br></li></ol><h4 id="转换页面后自动显示页面顶端-scrolltop为0"><a href="#转换页面后自动显示页面顶端-scrolltop为0" class="headerlink" title="转换页面后自动显示页面顶端(scrolltop为0)"></a>转换页面后自动显示页面顶端(scrolltop为0)</h4><p>在router.js里的router对象里</p><pre class=" language-js"><code class="language-js">scrollBehavior <span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> savedPosition<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><br><br><h4 id="重定向redirect"><a href="#重定向redirect" class="headerlink" title="重定向redirect"></a>重定向redirect</h4><p>在路径配置里面,使用重定向就不用import页面路径了</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>    path<span class="token punctuation">:</span><span class="token string">"/"</span><span class="token punctuation">,</span>    redirect <span class="token punctuation">:</span> <span class="token string">"/login"</span><span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><br><br><h4 id="页面导航router-link的显示和隐藏-meta属性"><a href="#页面导航router-link的显示和隐藏-meta属性" class="headerlink" title="页面导航router-link的显示和隐藏 meta属性"></a>页面导航router-link的显示和隐藏 meta属性</h4><ol><li>在router.js里面每个路径配置里添加meta属性<pre class=" language-js"><code class="language-js"> routes<span class="token punctuation">:</span><span class="token punctuation">[</span> <span class="token punctuation">{</span>     path<span class="token punctuation">:</span><span class="token string">"/login"</span><span class="token punctuation">,</span>     component<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span> <span class="token string">'@/views/login/index.vue'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     meta<span class="token punctuation">:</span><span class="token punctuation">{</span>         isShow<span class="token punctuation">:</span><span class="token boolean">false</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">]</span><span class="token punctuation">,</span></code></pre></li><li>在App.vue页面 id=”app”的导航链接标签里添加v-if判断<code>$route.meta.名称</code><pre class=" language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nav<span class="token punctuation">"</span></span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$route.meta.isshow<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Home<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span>|<span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>User<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre> <br> <br></li></ol><h2 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h2><h4 id="手动安装vuex并引入"><a href="#手动安装vuex并引入" class="headerlink" title="手动安装vuex并引入"></a>手动安装vuex并引入</h4><ol><li><p>安装vuex  <code>cnpm install vuex --save</code></p></li><li><p>在src下新建store =&gt; store.js</p></li><li><p>在store.js中添加import和export</p><pre class=" language-js"><code class="language-js"> <span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">"vue"</span> <span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">"vuex"</span> Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>store</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">export</span> <span class="token keyword">default</span> store</code></pre></li><li><p>在main.js中引入,地址根据实际情况修改</p><pre class=" language-js"><code class="language-js"> <span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">"./store/store.js"</span></code></pre></li></ol><h4 id="vuex的state属性"><a href="#vuex的state属性" class="headerlink" title="vuex的state属性"></a>vuex的state属性</h4><p>相当于<code>data</code>,用于存放数据<br>获取方式 <strong>:</strong><code>this.$store.state.获取的值</code><br>模块化 <strong>:</strong><code>this.$store.state.模块名.获取的值</code><br><br></p><h4 id="vuex的mutations属性"><a href="#vuex的mutations属性" class="headerlink" title="vuex的mutations属性"></a>vuex的mutations属性</h4><p>相当于<code>method</code>,处理同步的方法<br>获取方式 <strong>:</strong><code>this.$store.commit(&quot;函数名称&quot;)</code><br>模块化 <strong>:</strong><code>this.$store.commit.(&quot;模块名/函数名称&quot;)</code><br><br></p><h4 id="vuex的action属性"><a href="#vuex的action属性" class="headerlink" title="vuex的action属性"></a>vuex的action属性</h4><p>相当于<code>method</code>,处理异步的方法<br>获取方式 <strong>:</strong><code>this.$store.dispatch(&quot;函数名称&quot;)</code><br>模块化 <strong>:</strong><code>this.$store.dispatch.(&quot;模块名/函数名称&quot;)</code><br><br></p><h4 id="vuex的getters属性"><a href="#vuex的getters属性" class="headerlink" title="vuex的getters属性"></a>vuex的getters属性</h4><p>相当于<code>computed</code>属性<br>获取方式 <strong>:</strong><code>this.$store.getters.获取的值</code><br>模块化 <strong>:</strong><code>this.$store.getters[模块名/函数名称]</code><br><br></p><h4 id="在其他页面的引用方式"><a href="#在其他页面的引用方式" class="headerlink" title="在其他页面的引用方式"></a>在其他页面的引用方式</h4><ul><li>state和getters 在computed里面接收, </li><li>mutations和action 在method里面接收<pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//这里的state(){} , getters(){} , mutations(){} ,action(){}</span><span class="token comment" spellcheck="true">//对应的是当前页面使用的数据/方法的名称</span>computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token function">state</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>data  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">getters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>getters<span class="token punctuation">.</span>data  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token function">mutations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//可传值</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">"uptCount"</span><span class="token punctuation">,</span>val<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 可传值</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'uptCount'</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><br></li></ul><h4 id="辅助函数引用"><a href="#辅助函数引用" class="headerlink" title="辅助函数引用"></a>辅助函数引用</h4><p>在页面中先引用 <strong>:</strong><br><code>import { mapState, mapMutations, mapActions, mapGetters } from &quot;vuex&quot;;</code></p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> mapState<span class="token punctuation">,</span> mapMutations<span class="token punctuation">,</span> mapActions<span class="token punctuation">,</span> mapGetters <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vuex"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        state<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> state<span class="token punctuation">.</span>data<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            getters<span class="token punctuation">:</span><span class="token string">"getters"</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        add<span class="token punctuation">:</span> <span class="token string">"add"</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        add<span class="token punctuation">:</span> <span class="token string">"add"</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><br><h4 id="vuex的module属性"><a href="#vuex的module属性" class="headerlink" title="vuex的module属性"></a>vuex的module属性</h4><p><code>module</code> <strong>:</strong> 模块化,应用于大项目,数据较多的情况,把一个store.js内的数据分成很多份。</p><ol><li><p>在store文件夹下新建modules文件夹, modules 文件夹存放的是不同的js模块 ,这里新建一个user.js</p></li><li><p>现在目录结构: <code>store文件夹</code>=&gt;<code>store.js和modules文件夹</code>==modules文件夹里面==&gt; <code>user.js</code></p></li><li><p>在store.js中引入模块化的user.js</p><pre class=" language-js"><code class="language-js"> <span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">"vue"</span> <span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">"vuex"</span> Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">import</span> user <span class="token keyword">from</span> <span class="token string">"./modules/user"</span> <span class="token keyword">import</span> car <span class="token keyword">from</span> <span class="token string">"./modules/car"</span> <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     modules<span class="token punctuation">:</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//其他文件使用的名称 : export导出的名称</span>         user<span class="token punctuation">:</span> user<span class="token punctuation">,</span>         car<span class="token punctuation">:</span>car     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">export</span> <span class="token keyword">default</span> store             </code></pre></li><li><p>user.js文件中引入和导出</p><pre class=" language-js"><code class="language-js"> <span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>     state<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">//模块化的,必须写namespaced:true 不然下面三个不能使用</span>     namespaced<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>     mutations<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>     actions<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>     getters<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">export</span> <span class="token keyword">default</span> user</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 2019 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>总结-字符串和数组的方法</title>
      <link href="/2019/11/03/zong-jie-zi-fu-chuan-he-shu-zu-de-fang-fa/"/>
      <url>/2019/11/03/zong-jie-zi-fu-chuan-he-shu-zu-de-fang-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="字符串的方法"><a href="#字符串的方法" class="headerlink" title="字符串的方法"></a>字符串的方法</h1><h2 id="charAt-获取相应位置的字符"><a href="#charAt-获取相应位置的字符" class="headerlink" title="charAt() 获取相应位置的字符"></a>charAt() 获取相应位置的字符</h2><pre class=" language-html"><code class="language-html">var str = 'how are you! aNd you?';console.log(str.charAt(5)); // r 空格也算一个位置</code></pre><h2 id="charCodeAt-指定位置字符-的-Unicode-编码"><a href="#charCodeAt-指定位置字符-的-Unicode-编码" class="headerlink" title="charCodeAt() 指定位置字符 的 Unicode 编码"></a>charCodeAt() 指定位置字符 的 Unicode 编码</h2><pre class=" language-html"><code class="language-html">var str = 'how are you! aNd you?';console.log(str.charCodeAt(5)); // 114</code></pre><h2 id="indexOf-返回字符在字符串中的位置"><a href="#indexOf-返回字符在字符串中的位置" class="headerlink" title="indexOf() 返回字符在字符串中的位置"></a>indexOf() 返回字符在字符串中的位置</h2><pre class=" language-html"><code class="language-html">var str = 'how are you! aNd you?';console.log(str.indexOf('o')); // 1console.log(str.lastIndexOf('o')); // 18</code></pre><h2 id="concat-连接字符串"><a href="#concat-连接字符串" class="headerlink" title="concat() 连接字符串"></a>concat() 连接字符串</h2><pre class=" language-html"><code class="language-html">var str = 'how are you! aNd you?';var str2 = '?????';console.log(str.concat(str2)); //how are you! aNd you??????</code></pre><h2 id="slice-提取字符串的某个部分"><a href="#slice-提取字符串的某个部分" class="headerlink" title="slice() 提取字符串的某个部分"></a>slice() 提取字符串的某个部分</h2><pre class=" language-html"><code class="language-html">var str = 'how are you! aNd you?';console.log(str.slice(2, 9)); //w are y</code></pre><h2 id="substr-截取字符串-不会改变原字符串-开始的位置-结束的位置-开始结束都包括"><a href="#substr-截取字符串-不会改变原字符串-开始的位置-结束的位置-开始结束都包括" class="headerlink" title="substr() 截取字符串 不会改变原字符串 (开始的位置, 结束的位置),开始结束都包括"></a>substr() 截取字符串 不会改变原字符串 (开始的位置, 结束的位置),开始结束都包括</h2><pre class=" language-html"><code class="language-html">var str = 'how are you! aNd you?';console.log(str.substr(2, 9)); //w are you</code></pre><h2 id="toUpperCase"><a href="#toUpperCase" class="headerlink" title="toUpperCase()"></a>toUpperCase()</h2><pre class=" language-html"><code class="language-html">var str = 'how are you! aNd you?';console.log(str.toUpperCase());  //'HOW ARE YOU! AND YOU?'</code></pre><h2 id="toLowerCase"><a href="#toLowerCase" class="headerlink" title="toLowerCase()"></a>toLowerCase()</h2><pre class=" language-html"><code class="language-html">var str = 'how are you! aNd you?';var lowerStr = str.toLowerCase();console.log(lowerStr);  //'how are you! and you?'</code></pre><br><br><br><br><h1 id="数组的常用方法"><a href="#数组的常用方法" class="headerlink" title="数组的常用方法"></a>数组的常用方法</h1><h2 id="push"><a href="#push" class="headerlink" title="push()"></a>push()</h2><p><code>push()</code>：向数组的最后面插入一个或多个元素，返回结果为该数组新的长度。</p><p>语法：<br>数组.push(元素);<br>代码举例：</p><pre class=" language-html"><code class="language-html">var arr = ["王一", "王二", "王三"];var result1 = arr.push("王四"); // 末尾插入一个元素var result2 = arr.push("王五", "王六"); // 末尾插入多个元素console.log(result1); // 打印结果：4console.log(result2); // 打印结果：6console.log(arr); // 打印结果：["王一","王二","王三","王四","王五","王六"]</code></pre><h2 id="pop"><a href="#pop" class="headerlink" title="pop()"></a>pop()</h2><p><code>pop()</code>：删除数组中的最后一个元素，返回结果为被删除的元素。</p><p>语法：<br>数组.pop();<br>代码举例：</p><pre class=" language-html"><code class="language-html">var arr = ["王一", "王二", "王三"];var result1 = arr.pop();console.log(result1); // 打印结果：王三console.log(arr); // 打印结果：["王一","王二"]</code></pre><h2 id="unshift"><a href="#unshift" class="headerlink" title="unshift()"></a>unshift()</h2><p><code>unshift()</code>：在数组最前面插入一个或多个元素，返回结果为该数组新的长度。插入元素后，其他元素的索引会依次调整。</p><p>语法：<br>数组.unshift(元素);<br>代码举例：</p><pre class=" language-html"><code class="language-html">var arr = ["王一", "王二", "王三"];var result1 = arr.unshift("王四"); // 最前面插入一个元素var result2 = arr.unshift("王五", "王六"); // 最前面插入多个元素console.log(result1); // 打印结果：4console.log(result2); // 打印结果：6console.log(arr); // 打印结果：["王五","王六","王四","王一","王二","王三"]</code></pre><h2 id="shift"><a href="#shift" class="headerlink" title="shift()"></a>shift()</h2><p><code>shift()</code>：删除数组中的第一个元素，返回结果为被删除的元素。</p><p>语法：<br>数组.shift();<br>代码举例：</p><pre class=" language-html"><code class="language-html">var arr = ["王一", "王二", "王三"];var result1 = arr.shift();console.log(result1); // 打印结果：王一console.log(arr); // 打印结果：["王二","王三"]</code></pre><h2 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h2><p><code>concat()</code>：连接两个或多个数组，返回结果为新的数组。（不会改变原数组）</p><p>语法：<br>新数组 = 数组1.concat(数组2, 数组3 …);<br>代码举例：</p><pre class=" language-html"><code class="language-html">var nameArr1 = ["张三", "李四"];var nameArr2 = ["王五", "赵六"];var nameArr = nameArr1.concat(nameArr2);console.log(nameArr); // ['张三','李四','王五','赵六']console.log(nameArr1); // ['张三','李四']console.log(nameArr2); // ['王五','赵六']// 并未改变原数组，所以我要用一个新数组nameArr去接收合并后的数组，以便后续使用。</code></pre><h2 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h2><p><code>join()</code>：将数组转换为字符串，返回结果为转换后的字符串（不会改变原来的数组）。</p><p>补充：<code>join()</code>方法可以指定一个字符串作为参数，这个字符串将会成为数组中元素的连接符；如果不指定连接符，则默认使用 , 作为连接符，此时和 toString()的效果是一致的。</p><p>语法：<br>新的字符串 = 原数组.join(参数); // 参数选填<br>代码举例：</p><pre class=" language-html"><code class="language-html">var arr = [1, 2, 3];var arrStr = arr.join("-");console.log(arrStr); // 1-2-3console.log(arr); // [1,2,3]// 并未改变原数组</code></pre><h2 id="split"><a href="#split" class="headerlink" title="split()"></a>split()</h2><p><code>split()</code>：通过指定分隔符，如果省略，默认以逗号分隔，将字符串分割为字符串数组。</p><p>语法：<br>新数组 = 原字符串.split(分隔符, 数组长度);<br>第二个参数，制定返回数组的最大长度。</p><p>代码举例：</p><pre class=" language-html"><code class="language-html">var email = "abc@163.com;cc@126.com;frg@qq.com";var emailArr = email.split(";");console.log(emailArr); // ["abc@163.com", "cc@126.com", "frg@qq.com"]var emailArr2 = email.split(";", 2);var emailArr = email.split(";"); // ["abc@163.com", "cc@126.com"]</code></pre><h2 id="reverse"><a href="#reverse" class="headerlink" title="reverse()"></a>reverse()</h2><p><code>reverse()</code>：反转数组，返回结果为反转后的数组（会改变原来的数组）。</p><p>语法：<br>反转后的数组  =  数组.reverse();<br>举例：</p><pre class=" language-html"><code class="language-html">var arr = ["a", "b", "c", "d", "e", "f"];var result = arr.reverse(); // 将数组 arr 进行反转console.log("arr =" + arr);console.log("result =" + result);打印结果：arr = ["f", "e", "d", "c", "b", "a"];result = ["f", "e", "d", "c", "b", "a"];从打印结果可以看出，原来的数组已经被改变了。</code></pre><h2 id="sort-方法"><a href="#sort-方法" class="headerlink" title="sort()方法"></a>sort()方法</h2><p><code>sort()</code>方法要好好理解。所以，我们单独用一大段来讲。</p><p><code>sort()</code>：对数组的元素进行从小到大来排序（会改变原来的数组）。</p><ul><li><code>sort()</code>方法举例：无参时<br>如果在使用 sort() 方法时不带参，则默认按照Unicode 编码，从小到大进行排序。<pre class=" language-html"><code class="language-html">举例 1：（当数组中的元素为字符串时）</code></pre></li></ul><p>var arr1 = [“e”, “b”, “d”, “a”, “f”, “c”];</p><p>var result = arr1.sort(); // 将数组 arr1 进行排序</p><p>console.log(“arr1 =” + arr1);<br>console.log(“result =” + result);<br>打印结果：</p><p>arr1 = [“a”, “b”, “c”, “d”, “e”, “f”];<br>result = [“a”, “b”, “c”, “d”, “e”, “f”];<br>举例 2：（当数组中的元素为数字时）</p><p>var arr2 = [5, 2, 11, 3, 4, 1];</p><p>var result = arr2s.sort(); // 将数组 arr2 进行排序</p><p>console.log(“arr2 =” + arr2);<br>console.log(“result =” + result);<br>打印结果：</p><p>arr2 = [1, 11, 2, 3, 4, 5];<br>result = [1, 11, 2, 3, 4, 5];</p><pre><code>上方的打印结果中，你会发现，使用 sort() 排序后，数字11竟然在数字2的前面。这是为啥呢？因为上面讲到了，sort()方法是按照Unicode 编码进行排序的。那如果我想让 arr2 里的数字，完全按照从小到大排序，怎么操作呢？继续往下看。+ `sort()`方法举例：带参时如果在 sort()方法中带参，我们就可以自定义排序规则。具体做法如下：我们可以在 sort()添加一个回调函数，来指定排序规则。回调函数中需要定义两个形参，浏览器将会分别使用数组中的元素作为实参去调用回调函数浏览器根据回调函数的返回值来决定元素的排序：（重要）如果返回一个大于 0 的值，则元素会交换位置如果返回一个小于 0 的值，则元素位置不变如果返回一个 0，则认为两个元素相等，则不交换位置代码举例：```htmlvar arr3 = [5, 2, 11, 3, 4, 1];// 自定义排序规则var result = arr3.sort(function(a, b) {    return a - b; // 升序排列    // return b - a; // 降序排列});console.log(&quot;arr3 =&quot; + arr3); // [1,2,3,4,5,11]console.log(&quot;result =&quot; + result); // [1,2,3,4,5,11]</code></pre><h2 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h2><p><code>slice()</code>：从数组中提取指定的一个或者多个元素，返回结果为新的数组（不会改变原来的数组）。</p><p>备注：该方法不会改变原数组，而是将截取到的元素封装到一个新数组中返回。</p><p>语法：</p><p>新数组 = 原数组.slice(开始位置的索引, 结束位置的索引); //注意：包含开始索引，不包含结束索引<br>举例：</p><pre class=" language-html"><code class="language-html">var arr = ["a", "b", "c", "d", "e", "f"];var result1 = arr.slice(2); //从下标为2值开始提取var result2 = arr.slice(-2); //提取最后两个元素var result3 = arr.slice(2, 4); //提取从下标为2到下标为4之间的值（不包括下标为4的值）var result4 = arr.slice(4, 2); //空console.log("arr:" + arr);console.log("result1:" + result1);console.log("result2:" + result2);console.log("result3:" + result3);console.log("result4:" + result4);打印结果：arr: ["a", "b", "c", "d", "e", "f"];result1: ["c", "d", "e", "f"];result2: ["e", "f"];result3: ["c", "d"];result4: [];</code></pre><h2 id="splice"><a href="#splice" class="headerlink" title="splice()"></a>splice()</h2><p><code>splice()</code>：从数组中删除指定的一个或多个元素，返回结果为新的数组（会改变原来的数组，会将指定元素从原数组中删除）。</p><p>语法：</p><p>新数组 = 原数组.splice(起始索引index, 需要删除的个数, 第三个参数, 第四个参数…);<br>上方语法中，第三个及之后的参数，表示：向原数组中添加新的元素，这些元素将会自动插入到开始位置索引的前面。</p><pre class=" language-html"><code class="language-html">举例 1：var arr1 = ["a", "b", "c", "d", "e", "f"];var result1 = arr1.splice(1); //从第index为1的位置开始，删除元素console.log("arr1：" + arr1);console.log("result1：" + result1);console.log("-----------------------");var arr3 = ["a", "b", "c", "d", "e", "f"];var result3 = arr3.splice(1, 3); //从第index为1的位置开始删除元素,一共删除三个元素console.log("arr3：" + arr3);console.log("result3：" + result3);console.log("-----------------------");打印结果：arr1：["a"]result1：["b","c","d","e","f"]-----------------------arr3：["a","e","f"]result3：["b","c","d"]-----------------------举例 2：（我们来看看第三个参数的用法）var arr4 = ["a", "b", "c", "d", "e", "f"];//从第index为1的位置开始删除元素,一共删除三个元素。并且在 index=1 的前面追加两个元素var result4 = arr4.splice(1, 3, "千古壹号", "vae");console.log("arr4：" + arr4);console.log("result4：" + result4);打印结果：arr4：["a","千古壹号","vae","e","f"]result4：["b","c","d"]</code></pre><h2 id="indexOf-和-lastIndexOf-：获取数据的索引"><a href="#indexOf-和-lastIndexOf-：获取数据的索引" class="headerlink" title="indexOf() 和 lastIndexOf()：获取数据的索引"></a>indexOf() 和 lastIndexOf()：获取数据的索引</h2><p>语法：<br>索引值 = 数组.indexOf(value);</p><p>索引值 = 数组.lastIndexOf(value);<br>解释：</p><p><code>indexOf(value)</code>：从前往后索引，获取 value 在数组中的第一个下标。</p><p><code>lastIndexOf(value)</code> ：从后往前索引，获取 value 在数组中的最后一个下标。</p><p>作用：</p><p>利用这个方法，我们可以判断某个值是否在指定的数组中。如果没找到则返回-1。</p><pre class=" language-html"><code class="language-html">var arr = ["a", "b", "c", "d", "e", "d", "c"];console.log(arr.indexOf("c")); //从前往后，找第一个"c"在哪个位置,2console.log(arr.lastIndexOf("d")); //从后往前，找第一个"d"在哪个位置,5</code></pre><br><br><br><br><h1 id="数组的ES6常用方法"><a href="#数组的ES6常用方法" class="headerlink" title="数组的ES6常用方法"></a>数组的ES6常用方法</h1><h2 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from"></a>Array.from</h2><p>Array.from方法用于将<code>类对象(伪数组)</code>转为真正的数组(类数组对象比如arguments)<br>类数组对象特点 表现像数组 却没有数组该有的方法 比如push</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">function</span> <span class="token function">aa</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//Arguments(2) [1, 2, callee: ƒ, Symbol(Symbol.iterator): ƒ]</span>        arguments<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//arguments.push is not a function</span>    <span class="token punctuation">}</span>    <span class="token function">aa</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//  想让类数组对象使用数组该有的方法 Array.from转换</span>     <span class="token keyword">function</span> <span class="token function">aa</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//Arguments(2) [1, 2, callee: ƒ, Symbol(Symbol.iterator): ƒ]</span>        <span class="token keyword">var</span> arr <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>        arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//arguments.push is not a function</span>    <span class="token punctuation">}</span>    <span class="token function">aa</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="find-findIndex"><a href="#find-findIndex" class="headerlink" title="find/findIndex"></a>find/findIndex</h2><ul><li>find<br>数组实例的find方法，用于找出<code>第一个符合条件的数组成员</code>。它的参数是一个回调函数，所有数组成员依次执行该回调函数，直到找出<code>第一个返回值为true</code>的成员，然后返回该成员。<code>如果没有符合条件的成员，则返回undefined</code>。<br>find方法的回调函数可以接受三个参数，依次为当前的值、当前的位置和原数组。<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> ele <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> value <span class="token operator">></span> <span class="token number">9</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 10</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></li><li>findIndex<br>数组实例的findIndex方法的用法与find方法非常类似，返回第一个符合条件的数组成员的下标，如果所有成员都不符合条件，则返回-1。<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> value <span class="token operator">></span> <span class="token number">9</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 2</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></li></ul><h2 id="map-JavaScript-数组map-方法主要创建一个新的数组使用调用此数组中的每个元素上所提供的函数的结果。即对数组中的每一项运行给定函数，返回每次函数调用的结果组成的数组。"><a href="#map-JavaScript-数组map-方法主要创建一个新的数组使用调用此数组中的每个元素上所提供的函数的结果。即对数组中的每一项运行给定函数，返回每次函数调用的结果组成的数组。" class="headerlink" title="map JavaScript 数组map()方法主要创建一个新的数组使用调用此数组中的每个元素上所提供的函数的结果。即对数组中的每一项运行给定函数，返回每次函数调用的结果组成的数组。"></a><code>map</code> JavaScript 数组map()方法主要创建一个新的数组使用调用此数组中的每个元素上所提供的函数的结果。即<strong>对数组中的每一项运行给定函数，返回每次函数调用的结果组成的数组</strong>。</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">var</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> newList <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>ele <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">return</span> ele<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span>newList<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [1,2,3,4] [2,4,6,8]</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="forEach-方法对数组的每个元素执行一次提供的函数。"><a href="#forEach-方法对数组的每个元素执行一次提供的函数。" class="headerlink" title="forEach 方法对数组的每个元素执行一次提供的函数。"></a><code>forEach</code> 方法对数组的每个元素执行一次提供的函数。</h2><p>foreach 相当于for循环 对数据进行便利<br>    + 第一个特点 不能对每一项进行更改<br>    + 第二个特点  不能终止(break)  </p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">var</span> array1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>array1<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//  "a"</span><span class="token comment" spellcheck="true">//  "b"</span><span class="token comment" spellcheck="true">//  "c"</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="filter-过滤-方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。"><a href="#filter-过滤-方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。" class="headerlink" title="filter 过滤 方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。"></a><code>filter</code> <strong>过滤</strong> 方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">var</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> newList <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>ele <span class="token operator">=</span><span class="token operator">></span> ele <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span>newList<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [1,2,3,4] [3,4]</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><ul><li><p><code>every()</code>与<code>some()</code>方法都是JS中数组的迭代方法。</p><ul><li><code>every()</code><strong>所有都符合条件返回true</strong>是对数组中每一项运行给定函数，如果该函数对每一项返回true,则返回true。</li></ul></li></ul><pre><code>+ `some()`**有一个符合条件返回true**是对数组中每一项运行给定函数，如果该函数有对任一项返回true，则返回true。</code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">return</span> item <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// true </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> arr<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">return</span> item <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// false</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="includes判断是否包含某一值-方法用来判断一个数组是否包含一个指定的值，如果是返回-true，否则false。"><a href="#includes判断是否包含某一值-方法用来判断一个数组是否包含一个指定的值，如果是返回-true，否则false。" class="headerlink" title="includes判断是否包含某一值 方法用来判断一个数组是否包含一个指定的值，如果是返回 true，否则false。"></a><code>includes</code><strong>判断是否包含某一值</strong> 方法用来判断一个数组是否包含一个指定的值，如果是返回 true，否则false。</h2><p><code>arr.includes(a,b)</code><br>    + 第一个参数是判定的值。<br>    + 第二个参数是搜索的起始位置,不写从头开始,正数就是从左往右,负数从右往左。<strong>负数的时候,如果大于总length,则从0开始,但是正数如果大于总length,就是false</strong>。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// true</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// false</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// false</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="find和findIndex"><a href="#find和findIndex" class="headerlink" title="find和findIndex"></a><code>find</code>和<code>findIndex</code></h2><p><code>find()</code>函数用来查找目标元素，<strong>找到就返回该元素,不继续</strong>，找不到返回undefined，而<code>findIndex()</code>函数也是查找目标元素，<strong>找到就返回元素的位置,不继续</strong>，找不到就返回-1。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">var</span> stu <span class="token operator">=</span><span class="token punctuation">[</span>    <span class="token punctuation">{</span>        <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"张三"</span><span class="token punctuation">,</span>        <span class="token string">"gender"</span><span class="token punctuation">:</span> <span class="token string">"男"</span><span class="token punctuation">,</span>        <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">20</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"王小毛"</span><span class="token punctuation">,</span>        <span class="token string">"gender"</span><span class="token punctuation">:</span> <span class="token string">"男"</span><span class="token punctuation">,</span>        <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">20</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"李四"</span><span class="token punctuation">,</span>        <span class="token string">"gender"</span><span class="token punctuation">:</span> <span class="token string">"男"</span><span class="token punctuation">,</span>        <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">20</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token keyword">var</span> item <span class="token operator">=</span> stu<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token string">'李四'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 返回的是{name: "李四", gender: "男", age: 20}</span><span class="token keyword">var</span> index <span class="token operator">=</span> stu<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>name <span class="token operator">==</span><span class="token string">'李四'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 返回的是索引下标：2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item <span class="token punctuation">,</span> index<span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a><code>reduce</code></h2><p><code>reduce(total,current)</code> 方法接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值。</p><ul><li><p><code>total</code>:获取初始的值</p></li><li><p><code>current</code>:获取每次循环的当前的值</p></li><li><p>total不带初始值的写法</p><pre class=" language-html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">   <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//current  当前的元素 total 总和</span>   <span class="token keyword">var</span> totals <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>total<span class="token punctuation">,</span>current<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"total=>"</span><span class="token punctuation">,</span>total<span class="token punctuation">,</span><span class="token string">"current=>"</span><span class="token punctuation">,</span>current<span class="token punctuation">,</span>          <span class="token punctuation">)</span>       <span class="token keyword">return</span> total <span class="token operator">=</span> total <span class="token operator">+</span> current   <span class="token punctuation">}</span><span class="token punctuation">)</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>totals<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//total=> 1 current=> 2</span>  <span class="token comment" spellcheck="true">//total=> 3 current=> 3</span>  <span class="token comment" spellcheck="true">//total=> 6 current=> 4</span>  <span class="token comment" spellcheck="true">//10</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></li><li><p>total带初始值的写法</p><pre class=" language-html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> totals <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>total<span class="token punctuation">,</span>current<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"total=>"</span><span class="token punctuation">,</span>total<span class="token punctuation">,</span><span class="token string">"current=>"</span><span class="token punctuation">,</span>current<span class="token punctuation">,</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> total <span class="token operator">=</span> total <span class="token operator">+</span> current  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>totals<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//total=> 0 current=> 1</span>  <span class="token comment" spellcheck="true">//total=> 1 current=> 2</span>  <span class="token comment" spellcheck="true">//total=> 3 current=> 3</span>  <span class="token comment" spellcheck="true">//total=> 6 current=> 4</span>  <span class="token comment" spellcheck="true">//10</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 2019 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flex常见布局问题总结</title>
      <link href="/2019/11/03/flex-chang-jian-bu-ju-wen-ti-zong-jie/"/>
      <url>/2019/11/03/flex-chang-jian-bu-ju-wen-ti-zong-jie/</url>
      
        <content type="html"><![CDATA[<p>本编文章记载了作者在使用Flex布局时遇到的一些问题</p><h2 id="中间部分始终居中"><a href="#中间部分始终居中" class="headerlink" title="中间部分始终居中"></a>中间部分始终居中</h2><p>在框架中,我们经常会用到组件.<br>比如说在vue中的组件,我们经常会因为不同页面不同情况而写插槽,<br>这就会导致flex布局只排版插槽外的盒子.<br>举个例子:一个头部组件,正常情况是左边一个回退箭头,中间是页面标题,右侧会根据不同页面的情况显示</p><p>组件代码部分:</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myheader<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 回退箭头 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/my<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../assets/imgs/icon/back.png<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 标题 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{title}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 右侧部分 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>因为slot在html中不解析,所以这样使用flex就只是对左,中两个代码进行布局.标题无法居中显示.</p><p>解决方法:</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.center</span> </span><span class="token punctuation">{</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">17</span>px<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#ffffff</span><span class="token punctuation">;</span>    // 解决中间元素始终居中    <span class="token property">flex</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>    <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><br><br><h2 id="flex排版-最后一行-左对齐"><a href="#flex排版-最后一行-左对齐" class="headerlink" title="flex排版 最后一行 左对齐"></a>flex排版 最后一行 左对齐</h2><p>在日常的使用中,我们常常会遇到flex布局,但是最后一行在列不满的情况下不能左对齐的问题,就是图示问题:<img src="/mdimages/Flex%E5%B8%83%E5%B1%80%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/1.png" alt></p><h4 id="在网上搜索了很多资料-总结了下几种解决方案"><a href="#在网上搜索了很多资料-总结了下几种解决方案" class="headerlink" title="在网上搜索了很多资料,总结了下几种解决方案:"></a>在网上搜索了很多资料,总结了下几种解决方案:</h4><ol><li>添加空的盒子填满最后一行</li></ol><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector"><span class="token class">.item</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">32%</span><span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#00abff</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">60</span>px<span class="token punctuation">;</span>    <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.itemempty</span> </span><span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span>px<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">32%</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.box</span> </span><span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>    <span class="token property">justify-content</span><span class="token punctuation">:</span> space-between<span class="token punctuation">;</span>    <span class="token property">flex-wrap</span><span class="token punctuation">:</span> wrap<span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 添加空盒子 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>itemempty<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>itemempty<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>itemempty<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><ol start="2"><li>用父盒子伪元素<code>flex:auto</code>的方式,这种只适用<code>space-between</code>布局,<code>space-around</code>下还是会有问题,暂时还没找到解决办法.</li></ol><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.box</span><span class="token pseudo-element">:after</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>//宽度和子元素的宽度一致    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token property">flex</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><p>最终显示结果:<img src="/mdimages/Flex%E5%B8%83%E5%B1%80%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/2.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 2019 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flex </tag>
            
            <tag> 问题总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo常见问题总结</title>
      <link href="/2019/11/03/hexo-chang-jian-wen-ti/"/>
      <url>/2019/11/03/hexo-chang-jian-wen-ti/</url>
      
        <content type="html"><![CDATA[<p>本编文章记载了作者在构建自己博客时遇到的一些问题</p><h2 id="hexo-deploy上传图片不成功"><a href="#hexo-deploy上传图片不成功" class="headerlink" title="hexo deploy上传图片不成功"></a>hexo deploy上传图片不成功</h2><p> 把主页配置文件_config.yml 里的post_asset_folder:这个选项设置为true</p><h2 id="markdown使用网络链接图-在博客上无法加载"><a href="#markdown使用网络链接图-在博客上无法加载" class="headerlink" title="markdown使用网络链接图,在博客上无法加载"></a>markdown使用网络链接图,在博客上无法加载</h2><p> 将网络链接图下载下来放在<code>themes--source</code>内,markdown中图片链接改成<code>![](source下的相对路径)</code>即可<br> 比如 : 图片<code>1.png</code>保存在source下的<code>imgs</code>文件夹下,则markdown中图片链接改成<code>![](/imgs/1.png)</code></p>]]></content>
      
      
      <categories>
          
          <category> 2019 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 问题总结 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GIT的使用和hexo博客的创建</title>
      <link href="/2019/11/02/git-he-hexo/"/>
      <url>/2019/11/02/git-he-hexo/</url>
      
        <content type="html"><![CDATA[<h1 id="GIT"><a href="#GIT" class="headerlink" title="GIT"></a>GIT</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>​    Git的诞生确实是一个有趣的故事，当年Linus创建了开源的Linux，从此，Linux系统不断发展，现在已经成为最大的服务器系统软件了。</p><p>​    但是随着Linux的不断壮大，就需要各种版本控制了，起初Linus带着他的小弟们使用的是BitKeeper(商业版本控制系统),之后呢由于某种原因BitKeeper的公司不让他们使用了，于是Linus自己花了两周时间写出了Git并且开源了(BitKeeper已哭晕在厕所)。</p><p>​    之后的岁月里，渐渐有了github,coding等一些可以使用git存储的网站，Git的江湖地位变得无可替代了，Git几乎成了开发者必备的技能。</p><h3 id="Git-的作用"><a href="#Git-的作用" class="headerlink" title="Git 的作用"></a>Git 的作用</h3><ul><li>是一个源代码管理工具</li><li>让源代码可以被追溯，记录每次变更发生了什么，谁主导这些变化</li></ul><p>工作原理：<br><img src="/mdimages/Git%E7%9A%84%E4%BD%BF%E7%94%A8%E5%92%8Chexo%E7%9A%84%E5%88%9B%E5%BB%BA/1.png" alt></p><ul><li><p>Workspace:工作区，执行<code>git add *</code>命令就把改动提交到了暂存区，执行<code>git pull</code>命令将远程仓库的数据拉到当前分支并合并，执行<code>git checkout [branch-name]</code>切换分支</p></li><li><p>Index:暂存区，执行<code>git commit -m &#39;说明&#39;</code> 命令就把改动提交到了仓库区（当前分支）。这里保存了下次将提交的文件列表信息，一般在Git仓库目录中。</p></li><li><p>Repository:仓库区（或本地仓库），是对项目的某个版本独立提取出来的内容。这些从Git仓库的压缩数据库中提取出来的文件，放在磁盘上供你使用或修改。执行 <code>git push origin master</code> 将本地数据提交到远程仓库，执行 <code>git clone 地址</code> 将克隆远程仓库到本地</p></li><li><p>Remote:远程仓库，就是类似github，coding，gitee等网站所提供的仓库，用来保存项目的元数据和对象数据库的地方。 这是Git 中最重要的部分，从其它计算机克隆仓库时，拷贝的就是这里的数据。</p></li><li><p>基本的工作流程</p><p>1、在工作目录中修改文件</p><p>2、暂存文件，将文件的快照放入暂存区域</p><p>3、提交文件，找到暂存区域的文件，将快照永久性的存储到Git仓库目录</p></li></ul><h3 id="Git-术语"><a href="#Git-术语" class="headerlink" title="Git 术语"></a>Git 术语</h3><table><thead><tr><th>术语</th><th>定义</th></tr></thead><tbody><tr><td>仓库（Repository）</td><td>一个仓库包括了所有的版本信息、所有的分支和标记信息。在Git中仓库的每份拷贝都是完整的。仓库让你可以从中取得你的工作副本。</td></tr><tr><td>分支（Branches）</td><td>一个分支意味着一个独立的、拥有自己历史信息的代码线（code line）。你可以从已有的代码中生成一个新的分支，这个分支与剩余的分支完全独立。默认的分支往往是叫master。用户可以选择一个分支，选择一个分支执行命令<code>git checkout branch</code>.</td></tr><tr><td>标记（Tags）</td><td>一个标记指的是某个分支某个特定时间点的状态。通过标记，可以很方便的切换到标记时的状态，例如2009年1月25号在testing分支上的代码状态</td></tr><tr><td>提交（Commit）</td><td>提交代码后，仓库会创建一个新的版本。这个版本可以在后续被重新获得。每次提交都包括作者和提交者，作者和提交者可以是不同的人</td></tr><tr><td>修订（Revision）</td><td>用来表示代码的一个版本状态。Git通过用SHA1 hash算法表示的id来标识不同的版本。每一个 SHA1 id都是160位长，16进制标识的字符串.。最新的版本可以通过HEAD来获取。之前的版本可以通过”HEAD~1”来获取，以此类推。</td></tr></tbody></table><h3 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h3><p>可以配置Git忽略特定的文件或者是文件夹。这些配置都放在<code>.gitignore</code>文件中。这个文件可以存在于不同的文件夹中，可以包含不同的文件匹配模式。</p><p><strong>忽略之后的文件或是文件夹，Git就不去提交里面的内容了</strong></p><p>比如<code>.gitignore</code>内容可以如下：</p><pre class=" language-txt"><code class="language-txt">忽略某文件npm-debug.log忽略文件夹dist/node_modules/.idea/</code></pre><p>每次提交的时候Git会忽略空的文件夹，如果想要版本控制包括空文件夹，根据惯例会在空文件夹下放置<code>.gitkeep</code>文件。其实对文件名没有特定的要求。一旦一个空文件夹下有文件后，这个文件夹就会在版本控制范围内。</p><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>Git的设置文件为<code>.gitconfig</code>，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p><pre class=" language-node"><code class="language-node"># 显示当前的Git配置$ git config --list# 编辑Git配置文件，只是配置用户信息的话直接看下面两行命令即可$ git config -e [--global]# 设置提交代码时的用户信息，是否加上全局--global自行决定，一般是直接设置全局的。另外用户邮箱需要注意最好使用gmail,QQ也可以，需要和你远程仓库保持一致不然你的contribution是不会被记录在远程仓库的$ git config [--global] user.name "[name]"$ git config [--global] user.email "[email address]"</code></pre><h2 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h2><h2 id="重点-命令行中-复制-ctrl-enter-ctrl-c-是结束的意思"><a href="#重点-命令行中-复制-ctrl-enter-ctrl-c-是结束的意思" class="headerlink" title="重点 : 命令行中 复制 ctrl + enter   ( ctrl + c 是结束的意思)"></a>重点 : 命令行中 复制 <code>ctrl + enter</code>   ( <code>ctrl + c</code> 是结束的意思)</h2><h3 id="1、配置用户"><a href="#1、配置用户" class="headerlink" title="1、配置用户"></a>1、配置用户</h3><ul><li>git config –global user.name “自已的名字”</li><li>git config –global user.email “自已的邮箱地址”</li></ul><blockquote><p>–global 配置当前用户所有仓库<br>–system 配置当前计算机上所有用户的所有仓库</p></blockquote><p><strong>注：配置用户只需要执行1次，可以重复使用。</strong></p><h3 id="2、初始化仓库"><a href="#2、初始化仓库" class="headerlink" title="2、初始化仓库"></a>2、初始化仓库</h3><p>在文件夹中执行命令 <code>git init</code> ，创建了一个名为 .git 的隐藏目录，这个目录就是存储我们历史版本的仓库，ls -al 可以查看。</p><h3 id="3、查看文件状态"><a href="#3、查看文件状态" class="headerlink" title="3、查看文件状态"></a>3、查看文件状态</h3><p>通过命令 <code>git status</code> 可以检测当前仓库文件的状态</p><h3 id="4、添加和撤销文件到暂存区"><a href="#4、添加和撤销文件到暂存区" class="headerlink" title="4、添加和撤销文件到暂存区"></a>4、添加和撤销文件到暂存区</h3><ul><li>添加<br>命令 <code>git add 文件名 ( 包括路径和后缀,根目录就是git init 生成的.git所在的目录 )</code> 或 -A 代表所有，常使用 <code>git add .</code> 代表添加所有</li></ul><p>使用此命令后被提交的文件会变成<font color="green">绿色</font>，等待提交，如果配置了.gitignore 文件，在 .gitignore 中的文件不会被提交</p><ul><li>撤销<br>GIT提示代码:<code>git rm --cached &lt;file&gt;</code></li></ul><h3 id="5、撤销对文件的修改"><a href="#5、撤销对文件的修改" class="headerlink" title="5、撤销对文件的修改"></a>5、撤销对文件的修改</h3><p>修改文件后，再次 <code>git status</code> 可以再次查看仓库状态，被修改的文件会被标记为红色。如果想要回到之前的状态，可以使用 <code>git checkout 文件名</code> 命令，将暂存区的文件还原到工作区</p><h3 id="6、提交文件"><a href="#6、提交文件" class="headerlink" title="6、提交文件"></a>6、提交文件</h3><p>使用 <code>git commit -m &#39;备注信息&#39;</code> 可以将暂存的文件提交到<font color="orange">本地仓库</font>存储。这时再次使用 <code>git status</code> 命令会显示 <code>nothing to commit, working tree clean</code></p><h3 id="7、查看提交历史"><a href="#7、查看提交历史" class="headerlink" title="7、查看提交历史"></a>7、查看提交历史</h3><p>使用 <code>git log</code> 可以查看提交的历史，黄色的 <code>commit ab70206749e292e86a11918c032b1d0de5ebc2be</code> 中后面的一串英文是本次提交的唯一ID，一般称为 <strong>SHA</strong> 值。按 q 键退出</p><h3 id="8、恢复至某一次提交的状态"><a href="#8、恢复至某一次提交的状态" class="headerlink" title="8、恢复至某一次提交的状态"></a>8、恢复至某一次提交的状态</h3><p>通过 SHA值可以回到之前的某一次提交的状态（时光倒流），命令 <code>git reset --hard SHA值</code>。这里的SHA值可以仅写前7位</p><p>可以使用 <code>git reflog</code> 命令打印所有操作记录（包括 reset 事件），可以根据操作前面7位SHA值回退到某一个修改时的状态</p><h2 id="Git-分支"><a href="#Git-分支" class="headerlink" title="Git 分支"></a>Git 分支</h2><p>在Git的使用过程中所有的提交（commit）实际上都是在分支（branch）的基础上进行的，当我们在初始化仓库的时候（实际上是产生第1次提交时），Git会默认帮我们创建了一个master的分支，并且有指针（HEAD）指到了末端。</p><h3 id="1、创建分支"><a href="#1、创建分支" class="headerlink" title="1、创建分支"></a>1、创建分支</h3><p>命令 <code>git branch</code> 可以查看当前所有分支。使用命令 <code>git branch 分支名</code> 可以创建一个分支。新的分支会在当前分支原有历史版本的节点上进行创建，我们称其为子分支。新的子分支会继承父分支的所有提交历史</p><h3 id="2、切换分支"><a href="#2、切换分支" class="headerlink" title="2、切换分支"></a>2、切换分支</h3><p>使用命令 <code>git checkout 分支名</code> 可以切换分支</p><h3 id="3、子分支的修改"><a href="#3、子分支的修改" class="headerlink" title="3、子分支的修改"></a>3、子分支的修改</h3><p>修改某一文件，再次提交，这次的提交记录就会保存在新创建的分支上，并且HEAD指针会伴随着新的分支移动。再次切换回 master 分支，之前在分支上的提交记录并没有出现在主分支上。此时，在主分支上发生新的提交或修改事件也不会反映在子分支上，两个分支就完全的撇开了关系。</p><h3 id="4、合并分支"><a href="#4、合并分支" class="headerlink" title="4、合并分支"></a>4、合并分支</h3><p>可以通过命令 <code>git merge 分支名</code> 将该分支合并到主分支上，这时如果两者修改了同一文件，需要手动合并冲突。</p><p><strong>注意：这里如果存在冲突可能会进入蓝框，只需要按键盘上的ESC，然后输入 :wq 即可</strong></p><h3 id="5、删除分支"><a href="#5、删除分支" class="headerlink" title="5、删除分支"></a>5、删除分支</h3><p>使用命令 <code>git branch -d 分支名</code> 即可删除相应的分支。</p><h2 id="Github的使用"><a href="#Github的使用" class="headerlink" title="Github的使用"></a>Github的使用</h2><p>之前讲的git都是在本地工作，github是一个网站，一个git服务提供商，可以通过git将本地的文件托管在github上面。相当于一个远端仓库。因为可以开源自己的代码与世界上的其它开发者交流，GitHub走出了社交化编程的道路，也被戏称为程序员的同性交友网。因为GitHub访问速度有时比较慢，可以使用码云代替。</p><p>使用步骤：</p><ol><li><p>注册</p></li><li><p>生成密钥 <code>ssh-keygen -t rsa -C &#39;youremail@example.com&#39;</code></p></li><li><p>创建仓库，复制项目地址</p></li><li><p>在本地使用 <code>git clone 项目地址</code> 将创建的仓库拉取到本地</p><ul><li>在本地做出修改，使用 <code>git add .</code> 命令将文件提交</li><li>使用 <code>git commit -m &#39;修改标识&#39;</code> 将文件提交到暂存区</li><li>使用 <code>git push -u origin master</code> 将本地项目提交到GitHub仓库主分支上，首次推送加上 -u 之后就可以不加了。master 是远程的分支，如果你创建了分支，要往分支上提交，那么就需要将master改成分支的名字</li></ul></li><li><p>如果本地已有 git 项目</p><ul><li><code>git remote add origin xxxgit@xxx.git</code> 添加远程仓库地址</li><li><code>git push -u origin master</code> 将本地项目以流的形式提交到GitHub仓库主分支上</li><li>如果是合作开发，在 push 之前需要先执行 <code>git pull origin master</code> 将远端的更新获取到本地，然后修改冲突文件，在重新提交到暂存区，最后 push 到远端</li></ul></li><li><p>更新仓库</p></li></ol><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>假定我们创建好了一个远程仓库，现在我们在本地创建一个项目并同步到远程仓库中。</p><ol><li>创建文件添加到暂存区 —— git add *</li><li>提交到本地仓库 —— git commit -m “注释”</li><li>提交到远程仓库<ul><li>添加远程主机地址：—— git remote add origin 你的git路径</li><li>推送文件：—— git push</li></ul></li></ol><h2 id="Git-常用命令集合"><a href="#Git-常用命令集合" class="headerlink" title="Git 常用命令集合"></a>Git 常用命令集合</h2><h3 id="基础命令-1"><a href="#基础命令-1" class="headerlink" title="基础命令"></a>基础命令</h3><pre><code># 添加指定文件到暂存区$ git add [file1] [file2] ...# 添加指定目录到暂存区，包括子目录$ git add [dir]# 添加当前目录的所有文件到暂存区$ git add *# 添加每个变化前，都会要求确认对于同一个文件的多处变化，可以实现分次提交$ git add -p# 删除工作区文件，并且将这次删除放入暂存区$ git rm [file1] [file2] ...# 停止追踪指定文件，但该文件会保留在工作区$ git rm --cached [file]# 改名文件，并且将这个改名放入暂存区$ git mv [file-original] [file-renamed]# 提交暂存区到仓库区$ git commit -m [message]# 提交暂存区的指定文件到仓库区$ git commit [file1] [file2] ... -m [message]# 提交工作区自上次commit之后的变化，直接到仓库区$ git commit -a# 提交时显示所有diff信息$ git commit -v# 使用一次新的commit，替代上一次提交如果代码没有任何新变化，则用来改写上一次commit的提交信息$ git commit --amend -m [message]# 重做上一次commit，并包括指定文件的新变化$ git commit --amend [file1] [file2] ...# 提交更改到远程仓库$ git push origin master# 拉取远程更改到本地仓库默认自动合并$ git pull origin master</code></pre><h3 id="分支命令"><a href="#分支命令" class="headerlink" title="分支命令"></a>分支命令</h3><blockquote><p>但如果是多人协作的话，git的魅力就开始提现出来了，每个人有自己的一个分支，各自在自己的分支上工作互不干扰。具体的看这：<a href="https://link.juejin.im/?target=http%3A%2F%2Fwww.liaoxuefeng.com%2Fwiki%2F0013739516305929606dd18361248578c67b8067c8c017b000%2F001375840038939c291467cc7c747b1810aab2fb8863508000" target="_blank" rel="noopener">Git教程-创建合并分支</a></p></blockquote><pre><code># 列出所有本地分支$ git branch# 列出所有远程分支$ git branch -r# 列出所有本地分支和远程分支$ git branch -a# 新建一个分支，但依然停留在当前分支$ git branch [branch-name]# 新建一个分支，并切换到该分支$ git checkout -b [branch]# 新建一个分支，指向指定commit$ git branch [branch] [commit]# 新建一个分支，与指定的远程分支建立追踪关系$ git branch --track [branch] [remote-branch]# 切换到指定分支，并更新工作区$ git checkout [branch-name]# 切换到上一个分支$ git checkout -# 建立追踪关系，在现有分支与指定的远程分支之间$ git branch --set-upstream [branch] [remote-branch]# 合并指定分支到当前分支，如果有冲突需要手动合并冲突（就是手动编辑文件保存咯），然后add,commit再提交$ git merge [branch]# 选择一个commit，合并进当前分支$ git cherry-pick [commit]# 删除分支$ git branch -d [branch-name]# 删除远程分支$ git push origin --delete [branch-name]$ git branch -dr [remote/branch]</code></pre><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><blockquote><p>标签的作用主要是用来做版本回退的，关于版本回退，这也是Git的亮点之一，起到了后悔药的功能</p></blockquote><pre><code># 列出所有tag$ git tag# 新建一个tag在当前commit$ git tag [tag]# 新建一个tag在指定commit$ git tag [tag] [commit]# 删除本地tag$ git tag -d [tag]# 删除远程tag$ git push origin :refs/tags/[tagName]# 查看tag信息$ git show [tag]# 提交指定tag$ git push [remote] [tag]# 提交所有tag$ git push [remote] --tags# 新建一个分支，指向某个tag$ git checkout -b [branch] [tag]</code></pre><h3 id="后悔药"><a href="#后悔药" class="headerlink" title="后悔药"></a>后悔药</h3><blockquote><p>想一下在你写完N个文件代码后，commit到了本地仓库，突然发现出现重大bug导致整个应用崩溃了！Git给了我们吃后悔药的机会：</p></blockquote><pre><code># 恢复暂存区的指定文件到工作区$ git checkout [file]# 恢复某个commit的指定文件到暂存区和工作区$ git checkout [commit] [file]# 恢复暂存区的所有文件到工作区$ git checkout .# 回退到上一个版本，在Git中，用HEAD表示当前版本$ git reset --hard HEAD^# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变$ git reset [file]# 重置暂存区与工作区，与上一次commit保持一致$ git reset --hard# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变$ git reset [commit]# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致$ git reset --hard [commit]# 重置当前HEAD为指定commit，但保持暂存区和工作区不变$ git reset --keep [commit]# 新建一个commit，用来撤销指定commit# 后者的所有变化都将被前者抵消，并且应用到当前分支$ git revert [commit]# 暂时将未提交的变化移除，稍后再移入$ git stash$ git stash pop</code></pre><h3 id="查看文件信息"><a href="#查看文件信息" class="headerlink" title="查看文件信息"></a>查看文件信息</h3><pre><code># 显示当前分支的版本历史$ git log# 显示commit历史，以及每次commit发生变更的文件$ git log --stat# 搜索提交历史，根据关键词$ git log -S [keyword]# 显示某个commit之后的所有变动，每个commit占据一行$ git log [tag] HEAD --pretty=format:%s# 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件$ git log [tag] HEAD --grep feature# 显示某个文件的版本历史，包括文件改名$ git log --follow [file]$ git whatchanged [file]# 显示指定文件相关的每一次diff$ git log -p [file]# 显示过去5次提交$ git log -5 --pretty --oneline# 显示所有提交过的用户，按提交次数排序$ git shortlog -sn# 显示指定文件是什么人在什么时间修改过$ git blame [file]# 显示暂存区和工作区的差异$ git diff# 显示暂存区和上一个commit的差异$ git diff --cached [file]# 显示工作区与当前分支最新commit之间的差异$ git diff HEAD# 显示两次提交之间的差异$ git diff [first-branch]...[second-branch]# 显示今天你写了多少行代码$ git diff --shortstat &quot;@{0 day ago}&quot;# 显示某次提交的元数据和内容变化$ git show [commit]# 显示某次提交发生变化的文件$ git show --name-only [commit]# 显示某次提交时，某个文件的内容$ git show [commit]:[filename]</code></pre><h3 id="其它命令"><a href="#其它命令" class="headerlink" title="其它命令"></a>其它命令</h3><pre><code># git blame清楚的记录某个文件的更改历史和更改人，简直是查看背锅人的利器，filepath是需要查看的文件路径$ git blame filepath</code></pre><br><br><br><h2 id="搭建个人博客"><a href="#搭建个人博客" class="headerlink" title="搭建个人博客"></a>搭建个人博客</h2><h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><p><code>npm install -g hexo-cli</code></p><h3 id="第一步：创建仓库"><a href="#第一步：创建仓库" class="headerlink" title="第一步：创建仓库"></a>第一步：创建仓库</h3><p>进入github/bitbucket（后续都以github为例）新建repo，这里要注意repo的名字一定要满足<code>your Account Name</code>/github.io。如果是bitbucket那就是<code>your Account Name</code>/bitbucket.io，因为只有这样的仓库名称最后才能以静态页面展示。如图：XXX的内容一定要与红色的框里的文本一致。<br><img src="/mdimages/Git%E7%9A%84%E4%BD%BF%E7%94%A8%E5%92%8Chexo%E7%9A%84%E5%88%9B%E5%BB%BA/2.png" alt></p><h3 id="第二步：创建本地文件夹"><a href="#第二步：创建本地文件夹" class="headerlink" title="第二步：创建本地文件夹"></a>第二步：创建本地文件夹</h3><p>创建文件夹之后CD到你创建的文件夹中执行hexo的初始化相关命令</p><pre><code>$ hexo init$ npm install</code></pre><p>执行完毕之后你的文件夹里就有内容了，标准的目录结构是这样（只列出几个必要的文件夹及其子目录）</p><pre><code>├── _config.yml├── package.json├── scaffolds├── source|   ├── _drafts|   └── _posts└── themes</code></pre><ul><li><p>config.yml： 其中我们以后的大部分操作都会在<code>_config.yml</code>中进行，这个文件是我们的站点的 <a href="https://hexo.io/zh-cn/docs/configuration" target="_blank" rel="noopener">配置</a> 文件。</p></li><li><p>scaffolds： 模板文件，规定了我们创建一篇文章的时候最开始的样子。</p></li><li><p>source： 可以暂时的理解成我们文章的存放处。除 <code>_posts</code> 文件夹之外，开头命名为 <code>_</code> (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 <code>public</code> 文件夹，而其他文件会被拷贝过去。</p></li><li><p>themes： 主题文件。Hexo 会根据主题来生成静态页面。</p></li></ul><h3 id="第三步：部署到Git"><a href="#第三步：部署到Git" class="headerlink" title="第三步：部署到Git"></a>第三步：部署到Git</h3><p>修改我们的的站点配置文件<code>_config.yml</code>中如下字段</p><pre><code>deploy:  type: git  repo: XXXXX  branch: master</code></pre><p>其中：</p><ul><li><code>type</code>值对应的是你所部署的的服务器类型，我们这里填写git就可以</li><li><code>repo</code>是你的仓库地址，也就是仓库克隆的地址，推荐用https的链接</li><li><code>branch</code>不写默认是master，通常我们写成master就可以</li></ul><p><strong>以上配置完成后保存 然后回到终端执行 <code>npm install hexo-deployer-git --save</code> 安装一个插件，这样才能将你写好的文章部署到github服务器上并让别人浏览到。</strong></p><p>安装完成后在终端中依次执行如下代码</p><ul><li><p><code>hexo clean</code>  清理缓存</p></li><li><p><code>hexo generate</code> 进行渲染 简写 <code>hexo g</code></p></li><li><p><code>hexo serve</code> 部署到本地(调试使用) 简写 <code>hexo s</code>。然后浏览器输入 <code>http://localhost:4000</code> 就可以看到你博客的效果啦，不过这是本地调试用，其他人是看不到的。</p></li></ul><p><strong>(调试完毕后记得 <code>control + C</code> 关闭本地端口，不然下次就进不去啦)</strong></p><ul><li><p>调试完毕后使用 <code>hexo deploy</code> 简写为 <code>hexo d</code>来部署到git服务器。</p><p>执行完以上操作后打开浏览器地址了输入<code>http://你github名字.github.io</code>就可以看看到效果啦，这回是所有人都能看到的，用手机也可以。</p></li></ul><h3 id="第四步：写文章"><a href="#第四步：写文章" class="headerlink" title="第四步：写文章"></a>第四步：写文章</h3><p>使用如下命令 <code>hexo new post “文章名字”</code> 就可新建文章啦，建立好的文章在 <code>source/_posts</code> 中，你可以用markdown语法编辑内容就可以。编辑完成后执行第三步中终端的操作就可以啦，刷新下浏览器就可看到你的新文章啦。</p>]]></content>
      
      
      <categories>
          
          <category> 2019 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
